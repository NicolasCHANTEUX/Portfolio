// src/pages/projects/AppSport.jsx
import { motion } from "framer-motion";
import BackToHome from "../../components/BackToHome";

export default function AppSport() {
  return (
    <section className="min-h-screen py-16 px-6 bg-white">
      <div className="max-w-5xl mx-auto">
        <BackToHome />
        <motion.h1 
          className="text-4xl font-bold mb-4"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          Application Sportive
        </motion.h1>

        <motion.p
          className="text-gray-600 mb-8 text-lg"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2, duration: 0.6 }}
        >
          Application Java de suivi d'entra√Ænements sportifs avec interface graphique et base de donn√©es.
        </motion.p>

        <motion.img 
          src="/assets/app_muscu/img_app_muscu.png"
          alt="Capture d'√©cran de l'application sportive"
          className="rounded-lg shadow mb-10 w-full object-cover"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3, duration: 0.6 }}
          onError={(e) => {
            e.target.src = "https://via.placeholder.com/900x400?text=Image+non+trouv√©e";
            e.target.onerror = null;
          }}
        />

        <motion.div
          className="space-y-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.4, duration: 0.6 }}
        >
          <div>
            <h2 className="text-2xl font-semibold mb-2">Description du projet</h2>
            <p className="text-gray-700">
              Cette application Java a √©t√© con√ßue pour aider les sportifs √† suivre et g√©rer leurs entra√Ænements 
              de musculation. Elle permet aux utilisateurs d'enregistrer leurs s√©ances, de suivre leur progression 
              sur diff√©rents exercices, et de visualiser leurs performances au fil du temps. L'application utilise 
              une architecture structur√©e avec une interface graphique JavaFX et une base de donn√©es PostgreSQL 
              pour stocker les donn√©es des utilisateurs.
            </p>
          </div>

          <div>
            <h2 className="text-2xl font-semibold mb-2">Fonctionnalit√©s principales</h2>
            <ul className="list-disc list-inside text-gray-700">
              <li>Cr√©ation et gestion de profils utilisateurs</li>
              <li>Biblioth√®que d'exercices pr√©d√©finis avec descriptions et illustrations</li>
              <li>Cr√©ation de programmes d'entra√Ænement personnalis√©s</li>
              <li>Enregistrement des s√©ances avec poids, r√©p√©titions et sensations</li>
              <li>Visualisation de la progression avec graphiques</li>
              <li>Calcul de statistiques (charges maximales, volume d'entra√Ænement)</li>
              <li>Exportation des donn√©es au format CSV</li>
              <li>Syst√®me de rappels et de planification</li>
            </ul>
          </div>

          <div>
            <h2 className="text-2xl font-semibold mb-2">D√©veloppement</h2>
            <p className="text-gray-700">
              Ce projet a √©t√© d√©velopp√© en utilisant Java 11 avec JavaFX pour l'interface graphique. 
              J'ai adopt√© une architecture MVC (Mod√®le-Vue-Contr√¥leur) pour s√©parer clairement les diff√©rentes 
              responsabilit√©s du code. La persistance des donn√©es est assur√©e par PostgreSQL, avec JDBC pour 
              la communication entre l'application et la base de donn√©es. Le projet a √©t√© g√©r√© avec Maven pour 
              faciliter la gestion des d√©pendances et du build.
            </p>
          </div>

          <div>
            <h2 className="text-2xl font-semibold mb-2">Stack technique</h2>
            <ul className="list-disc list-inside text-gray-700">
              <li>Java 11</li>
              <li>JavaFX</li>
              <li>PostgreSQL</li>
              <li>JDBC</li>
              <li>Maven</li>
              <li>Architecture MVC</li>
              <li>JUnit pour les tests</li>
              <li>Git pour le versioning</li>
            </ul>
          </div>

          <div>
            <h2 className="text-2xl font-semibold mb-2">D√©fis et solutions</h2>
            <p className="text-gray-700">
              Le principal d√©fi de ce projet a √©t√© la conception d'un mod√®le de donn√©es flexible pouvant s'adapter 
              √† diff√©rents types d'exercices et de m√©thodes d'entra√Ænement. J'ai r√©solu ce probl√®me en cr√©ant 
              un syst√®me modulaire o√π les exercices peuvent avoir diff√©rents param√®tres et m√©triques. Un autre d√©fi 
              √©tait la cr√©ation d'une interface intuitive pour la saisie rapide des donn√©es pendant un entra√Ænement. 
              Pour cela, j'ai impl√©ment√© un syst√®me de formulaires dynamiques et de raccourcis qui minimisent 
              le temps n√©cessaire pour enregistrer une s√©rie.
            </p>
          </div>

          <div className="mt-6 flex gap-4">
            <a 
              href="https://github.com/NicolasCHANTEUX/MusculationApp" 
              target="_blank" 
              rel="noopener noreferrer"
              className="inline-block px-6 py-3 bg-gray-100 hover:bg-gray-200 border border-gray-300 rounded text-sm font-medium"
            >
              üîó Voir le code sur GitHub
            </a>
            <button 
              onClick={() => alert("T√©l√©chargement non disponible pour le moment")}
              className="inline-block px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm font-medium"
            >
              üì• T√©l√©charger l'application
            </button>
          </div>
        </motion.div>
      </div>
    </section>
  );
}
